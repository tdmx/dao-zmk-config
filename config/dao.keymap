/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    behaviors {
        sks_cw: sks_cw {
            compatible = "zmk,behavior-tap-dance";
            label = "SKS_CW";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };

        kp_mod: kp_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "tap-preferred";
        };

        m_accel_0: m_accel_0 {
            compatible = "zmk,behavior-mouse-move";
            label = "M_ACCEL_0";
            #binding-cells = <1>;
            acceleration-exponent = <1>;
        };

        m_accel_1: m_accel_1 {
            compatible = "zmk,behavior-mouse-move";
            label = "M_ACCEL_1";
            #binding-cells = <1>;
            acceleration-exponent = <2>;
        };

        m_accel_2: m_accel_2 {
            compatible = "zmk,behavior-mouse-move";
            label = "M_ACCEL_2";
            #binding-cells = <1>;
            acceleration-exponent = <3>;
        };

        sks_mod: sks_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "SKS_MOD";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "balanced";
        };

        krepeat_mod: krepeat_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "KREPEAT_MOD";
            bindings = <&kp>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "balanced";
        };

        kp_layer_hold_pref: kp_layer_hold_pref {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_LAYER_HOLD_PREF";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
        };

        mouse_mv_speed_1: mouse_mv_speed_1 {
            compatible = "zmk,behavior-mouse-move";
            label = "MOUSE_MV_SPEED_1";
            #binding-cells = <1>;
            time-to-max-speed-ms = <0>;
            acceleration-exponent = <1>;
        };

        mouse_mv_speed_2: mouse_mv_speed_2 {
            compatible = "zmk,behavior-mouse-move";
            label = "MOUSE_MV_SPEED_2";
            #binding-cells = <1>;
            time-to-max-speed-ms = <0>;
            acceleration-exponent = <2>;
        };

        mouse_mv_speed_3: mouse_mv_speed_3 {
            compatible = "zmk,behavior-mouse-move";
            label = "MOUSE_MV_SPEED_3";
            #binding-cells = <1>;
            time-to-max-speed-ms = <0>;
            acceleration-exponent = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q            &kp W                 &kp E               &kp R                 &kp T                            &kp Y        &kp U         &kp I      &kp O    &kp P                    &sks_cw
&lt 5 ESC  &kp_mod LCTRL A  &kp_mod LEFT_SHIFT S  &kp_mod LEFT_ALT D  &kp_mod LCMD F        &lt 12 G                         &kp H        &kp J         &kp K      &kp L    &kp_mod LCTRL SEMICOLON  &kp_mod LCMD SINGLE_QUOTE
&tog 9     &kp_mod LCMD Z   &kp X                 &kp C               &kp V                 &kp B                            &kp N        &kp M         &kp COMMA  &kp DOT  &kp_mod LCMD SLASH       &mt RALT BSLH
                                                  &mt LS(TAB) TAB     &sks_mod LCMD LSHIFT  &kp_layer_hold_pref 1 BACKSPACE  &lt 2 SPACE  &lt 4 RETURN  &lt 5 DEL
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp QMARK             &kp AT_SIGN  &kp EXCL    &kp TILDE    &kp TAB            &trans     &caps_word        &kp UNDERSCORE  &kp QUESTION  &trans                &kp BACKSPACE
&trans  &kp AMPERSAND         &kp STAR     &kp DOLLAR  &kp HASH     &kp DOUBLE_QUOTES  &trans     &kp PLUS          &kp EQUAL       &kp GRAVE     &kp PIPE              &trans
&tog 9  &kp NON_US_BACKSLASH  &kp PIPE     &kp CARET   &kp PERCENT  &trans             &trans     &kp MINUS         &kp COLON       &sk LSHIFT    &kp NON_US_BACKSLASH  &trans
                                           &trans      &trans       &trans             &lt 3 RET  &mt LSHIFT SPACE  &lt 3 DEL
            >;
        };

        raise_layer {
            bindings = <
&kp TAB  &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp KP_MINUS  &kp TAB          &kp DOLLAR    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSPACE  &trans
&trans   &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS   &kp KP_DIVIDE    &kp KP_MINUS  &kp LEFT_BRACE        &kp RIGHT_BRACE        &sks_cw        &kp BACKSPACE
&tog 9   &kp SPACE        &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_COMMA  &kp KP_MULTIPLY  &kp KP_PLUS   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp RETURN     &trans
                                     &kp KP_N0  &kp KP_DOT  &lt 3 RET     &lt 3 ESC        &trans        &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &kp K_PREV             &kp K_PLAY_PAUSE       &kp K_NEXT             &sys_reset             &kp LS(LA(LC(LG(T))))  &bt BT_SEL 0          &bt BT_SEL 1           &bt BT_SEL 2           &bt BT_SEL 3           &bt BT_SEL 4  &bt BT_CLR
&none        &kp LS(LA(LC(LG(A))))  &kp LS(LC(LA(LG(S))))  &kp LS(LA(LC(LG(D))))  &kp LS(LA(LC(LG(F))))  &kp C_BRIGHTNESS_DEC   &kp C_BRIGHTNESS_INC  &kp LS(LA(LC(LG(J))))  &kp LS(LA(LC(LG(K))))  &kp LS(LA(LC(LG(L))))  &none         &none
&tog 9       &none                  &none                  &none                  &none                  &kp C_VOL_DN           &kp C_VOL_UP          &kp K_MUTE             &none                  &none                  &none         &none
                                                           &trans                 &none                  &trans                 &trans                &none                  &trans
            >;
        };

        nav_layer {
            bindings = <
&trans     &kp LG(W)                &mt LEFT_ALT GRAVE  &kp DELETE        &kp BACKSPACE  &kp LS(LC(PAGE_UP))  &kp LS(LC(PAGE_DOWN))  &kp PG_UP  &kp UP    &kp PG_DN  &trans         &trans
&trans     &kp_mod LCTRL LS(LG(A))  &kp LSHFT           &kp LALT          &kp LGUI       &kp LC(LS(TAB))      &kp LC(TAB)            &kp LEFT   &kp DOWN  &kp RIGHT  &kp RET        &trans
&kp LSHFT  &kp LG(Z)                &kp LG(X)           &kp LG(C)         &kp LG(V)      &kp LG(LBKT)         &kp LG(RBKT)           &kp HOME   &kp TAB   &kp END    &kp LS(LG(Z))  &trans
                                                        &kp SINGLE_QUOTE  &kp SPACE      &kp DEL              &trans                 &trans     &trans
            >;

            label = "Nav";
        };

        mouse_layer {
            bindings = <
&trans  &kp LG(W)  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans  &kp LS(LC(TAB))  &mmv MOVE_UP    &kp LC(TAB)      &kp UP_ARROW    &trans
&trans  &trans     &mo 6      &mo 7      &mo 8      &trans  &trans  &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp DOWN_ARROW  &trans
&tog 9  &trans     &trans     &trans     &trans     &trans  &trans  &mkp LCLK        &mkp MCLK       &mkp RCLK        &trans          &trans
                              &trans     &trans     &trans  &trans  &trans           &trans
            >;
        };

        mouse_speed_1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                       &mouse_mv_speed_1 MOVE_UP    &trans                        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mouse_mv_speed_1 MOVE_LEFT  &mouse_mv_speed_1 MOVE_DOWN  &mouse_mv_speed_1 MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                       &trans                       &trans                        &trans  &trans
                        &trans  &trans  &trans  &trans  &trans                       &trans
            >;
        };

        mouse_speed_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                       &mouse_mv_speed_2 MOVE_UP    &trans                        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mouse_mv_speed_2 MOVE_LEFT  &mouse_mv_speed_2 MOVE_DOWN  &mouse_mv_speed_2 MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                       &trans                       &trans                        &trans  &trans
                        &trans  &trans  &trans  &trans  &trans                       &trans
            >;
        };

        mouse_speed_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                       &mouse_mv_speed_3 MOVE_UP    &trans                        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mouse_mv_speed_3 MOVE_LEFT  &mouse_mv_speed_3 MOVE_DOWN  &mouse_mv_speed_3 MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                       &trans                       &trans                        &trans  &trans
                        &trans  &trans  &trans  &trans  &trans                       &trans
            >;
        };

        mode_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &to 10  &trans  &trans  &trans  &trans  &trans  &trans
&to 0   &to 3   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &to 2   &trans  &trans  &trans  &to 5   &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        switch_test_layer {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&to 9  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
                     &none  &none  &none  &none  &none  &none
            >;
        };

        win_nav_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        f_key_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                        &trans  &trans  &kp LCMD  &trans  &trans  &trans
            >;
        };
    };
};
